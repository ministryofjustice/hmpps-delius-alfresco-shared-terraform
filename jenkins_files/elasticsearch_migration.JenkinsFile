def project = [:]
project.network   = 'hmpps-delius-network-terraform'
project.dcore     = 'hmpps-delius-core-terraform'
project.alfresco  = 'hmpps-delius-alfresco-shared-terraform'

def docker_tls_dir = '${HOME}/.docker_jenkins'

def environments = [
  'alfresco-dev'
]

def prepare_env() {
    sh '''
    #!/usr/env/bin bash
    sudo yum install -y nc
    docker pull mojdigitalstudio/hmpps-terraform-builder:latest
    '''
}

def get_configs(git_project_dir) {
    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
        sh """
        #!/usr/env/bin bash
        cd "${git_project_dir}"
        git clone https://github.com/ministryofjustice/hmpps-env-configs.git env_configs
        set -e
        """
    }
}


def create_props(env_name, git_project_dir, docker_tls_dir) {
    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
        sh """
        #!/usr/env/bin bash
        cd "${git_project_dir}"
        sh restore/set-properties.sh ${env_name} ${docker_tls_dir}
        set -e
        """
    }
}

def es_5_restore(git_project_dir, docker_tls_dir) {
    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
        sh """
        #!/usr/env/bin bash
        cd "${git_project_dir}"
        source ${docker_tls_dir}/docker.properties
        docker-compose -f restore/docker-compose-es5-restore.yml up --build -d elasticsearch
        docker-compose -f restore/docker-compose-es5-restore.yml up --exit-code-from elasticsearch-manager elasticsearch-manager
        """
    }
}

def es_6_restore(git_project_dir, docker_tls_dir) {
    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
        sh """
        #!/usr/env/bin bash
        cd "${git_project_dir}"
        source ${docker_tls_dir}/docker.properties
        docker-compose -f restore/docker-compose-es6-restore.yml up --exit-code-from elasticsearch-manager elasticsearch-manager
        """
    }
}

def es_destroy(git_project_dir, docker_tls_dir) {
    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
        sh """
        #!/usr/env/bin bash
        cd "${git_project_dir}"
        source ${docker_tls_dir}/docker.properties
        docker-compose -f restore/docker-compose-es5-restore.yml down -v
        docker-compose -f restore/docker-compose-es6-restore.yml down -v
        """
    }
}

def apply_submodule(env_name, git_project_dir, submodule_name) {
    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
        sh """
        #!/usr/env/bin bash
        echo "TF APPLY for ${env_name} | ${submodule_name} - component from git project ${git_project_dir}"
        set +e
        cd "${git_project_dir}"
        python docker-run.py --env ${env_name} --component ${submodule_name} --action plan
        python docker-run.py --env ${env_name} --component ${submodule_name} --action apply
        set -e
        """
    }
}

def destroy_ec2(env_name, git_project_dir, submodule_name) {
    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
        sh """
        #!/usr/env/bin bash
        echo "TF Destroy for ${env_name} | ${submodule_name} - component from git project ${git_project_dir}"
        set +e
        cd "${git_project_dir}"
        python docker-run.py --env ${env_name} --component ${submodule_name} --action destroy
        set -e
        """
    }
}

def do_terraform(env_name, git_project, component) {
    apply_submodule(env_name, git_project, component)
}

def debug_env() {
    sh '''
    #!/usr/env/bin bash
    pwd
    '''
}

pipeline {

    agent { label "jenkins_agent" }

    parameters {
        choice(
          name: 'environment_name',
          choices: environments,
          description: 'Select environment for creation or updating.'
        )
    }

    stages {
        stage('Alfresco | Get Configs') { steps { script { get_configs(project.alfresco)}}}
        stage('setup') {
            steps {
                slackSend(message: "Build started on \"${environment_name}\" - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL.replace(':8080','')}|Open>)")

                dir( project.network ) {
                  git url: 'git@github.com:ministryofjustice/' + project.network, branch: 'master', credentialsId: 'f44bc5f1-30bd-4ab9-ad61-cc32caf1562a'
                }
                dir( project.alfresco ) {
                  git url: 'git@github.com:ministryofjustice/' + project.alfresco, branch: 'issue_106_update_es_admin_iam_permissions', credentialsId: 'f44bc5f1-30bd-4ab9-ad61-cc32caf1562a'
                }

                prepare_env()
            }
        }

        stage('Delius | Alfresco Certs') {
          steps {
            script {
              do_terraform(environment_name, project.alfresco, 'certs')
            }
          }
        }

        stage('Delius | Alfresco es-admin') {
          steps {
            script {
              do_terraform(environment_name, project.alfresco, 'es_admin')
            }
          }
        }

        stage('Delius | Create Props') {
          steps {
            script {
              create_props(environment_name, project.alfresco, docker_tls_dir)
            }
          }
        }

        stage('Delius | ES 5 Restore') {
          steps {
            script {
              es_5_restore(project.alfresco, docker_tls_dir)
            }
          }
        }

        stage('Delius | ES 6 Restore') {
          steps {
            script {
              es_6_restore(project.alfresco, docker_tls_dir)
            }
          }
        }                
    }

    post {
        always {
            script {
              es_destroy(project.alfresco, docker_tls_dir)
            }
            script {
              destroy_ec2(environment_name, project.alfresco, 'es_admin')
            }
            deleteDir()
        }
        success {
            slackSend(message: "Build completed on \"${environment_name}\" - ${env.JOB_NAME} ${env.BUILD_NUMBER} ", color: 'good')
        }
        failure {
            slackSend(message: "Build failed on \"${environment_name}\" - ${env.JOB_NAME} ${env.BUILD_NUMBER} ", color: 'danger')
        }
    }

}
